%Wolfe Method
%
m = 2;
maxeqn = 6*x + 6*y - x^2 - y^2 - 18;
n = 2;
consLHS(1) = x + y;
consRHS(1) = 2;
consLHS(2) = x - y;
consRHS(2) = 1;
%}

syms x y z lambda mu
%{
m = input("Ïnput Number of variables: ");
maxeqn = input("Input Max Objective Function: ");
n = input("Ïnput Number of constraints: ");
consLHS(1) = input("Ïnput constraint LHS: ");
consRHS(1) = input("Ïnput constraint RHS: ");
for i=2:n
    consLHS(i) = input("Ïnput constraint LHS: ");
    consRHS(i) = input("Ïnput constraint RHS: ");
end
%}
if m==2
    var = [x,y];
    z = [0,0];
elseif m==3
    var = [x,y,z];
    z = [0,0,0];
else
    var = x;
    z = 0;
end
J = jacobian(maxeqn,var);
D = (1/2)*jacobian(J,var);
C = transpose(subs(J,var,z));
A = jacobian(consLHS,var);
b = transpose(consRHS);
fprintf("KKT Conditions are:\n");
KKTLHS = [-2*D, transpose(A), -eye(ndims(D(1))), zeros(ndims(D(1)),size(A,1)); A, zeros(size(A,1)), zeros(size(A,1),ndims(D(1))), eye(size(A,1))]
KKTRHS = [C; b]

%Solving the problem thus generated by using Restricted Entry Simplex Method
D = Hessian(maxeqn,m);
for i = 1:m
    lx(i,1) = subs(diff(maxeqn,var(i)),var(i),0);
    inq(1,i) = -1;
end
max = -1;
x = wolf(D,lx,b,A,inq,max)





